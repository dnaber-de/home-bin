#!/usr/bin/env bash

# create backups on /media/david/wppassport/1804

# force strict variable handling (declaration)
set -euo pipefail

BACKUP_DIR="/media/david/wppassport/1804"
CURRENT_WD=$(pwd)
#CURRENT_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

# check if the backup device is available
if [[ ! -d "${BACKUP_DIR}" ]]; then
	echo "Error: Backup device not found"
	exit 1
fi

if [[ ! -d ~/bak ]]; then
	echo "Creating ~/bak directory"
	mkdir ~/bak
fi

echo "Building ~/packages.list …"
dpkg --get-selections | awk '!/deinstall|purge|hold/ {print $1}' > ~/bak/packages.list

echo "Building ~/sources.list …"
find /etc/apt/sources.list* -type f -name '*.list' \
	-exec bash -c "echo -e \"\n## \$1 \";grep \"^[[:space:]]*[^#[:space:]]\" \${1}" _ {} \; \
	> ~/bak/sources.list

##
# Backing up /root
#
if [[ ! -d "$BACKUP_DIR/root" ]]; then
	mkdir "${BACKUP_DIR}/root"
fi

echo "Start backup /root …"
rsync -a --delete /root/  "${BACKUP_DIR}/root/"

##
# Backing up /etc
#
if [[ ! -d "${BACKUP_DIR}/etc" ]]; then
	mkdir "${BACKUP_DIR}/etc"
fi	

echo "Start backup /etc …"
rsync -a --delete /etc/ "${BACKUP_DIR}/etc/"

##
# Backing up /opt
#
if [[ ! -d "${BACKUP_DIR}/opt" ]]; then
	mkdir "${BACKUP_DIR}/opt"
fi

echo "Start backup /opt …"
rsync -a /opt/ "${BACKUP_DIR}/opt/"

##
# Backing up /home/david
#
if [[ ! -d "${BACKUP_DIR}/home/david" ]]; then
	mkdir -p ${BACKUP_DIR}/home/david
fi

echo "Start backup /home/david …"
# CD to /home as there is the .rsync-filter file
cd /home
rsync -aF --delete  david/ "${BACKUP_DIR}/home/david/"

##
# backup /home/.rsync-filter
#
if [[ -f /home/.rsync-filter ]]; then
	rsync /home/.rsync-filter ${BACKUP_DIR}/home/.rsync-filter
fi

##
# Backing up /var/www
#
#if [[ -d "$BACKUP_DIR/var/www" ]]; then
#    echo "Start backup /var/www …"
#    cd /var/www
#    rsync -aF ./ "$BACKUP_DIR/var/www/"
#else
#    echo "Error: Could not backup /var/www as directory $BACKUP_DIR/var/www does not exist"
#fi

cd "$CURRENT_WD"
